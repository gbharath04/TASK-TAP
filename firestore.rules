rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isWorker() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'worker';
    }
    
    function isEmployer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'employer';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false; // Prevent user deletion
    }

    // Jobs collection
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isEmployer();
      allow update: if isAuthenticated() && 
        (isEmployer() && resource.data.employerId == request.auth.uid);
      allow delete: if false; // Prevent job deletion

      // Applications subcollection
      match /applications/{applicationId} {
        // Allow seekers (workers) to create applications
        allow create: if isAuthenticated() && isWorker();
        // Allow reading if owner or employer
        allow read: if isAuthenticated() && 
          (isOwner(resource.data.workerId) || 
           (isEmployer() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid));
        // Allow update if owner or employer
        allow update: if isAuthenticated() && 
          (isOwner(resource.data.workerId) || 
           (isEmployer() && get(/databases/$(database)/documents/jobs/$(jobId)).data.employerId == request.auth.uid));
      }
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    // Agreements collection
    match /agreements/{agreementId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.employerId || 
         request.auth.uid == resource.data.workerId);
      allow create: if isAuthenticated();
      allow update: if false; // Only allow updates through Cloud Functions
    }
  }
} 